# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

schedules:
- cron: "0 0 * * *"
  displayName: Run At 7PM 
  branches:
    include:
    - main
  always: true
    
#To run on a schedule PR and CI triggers must be disabled.
pr: none
trigger: none

pool:
  vmImage: ubuntu-latest

steps:
- script: echo OWASP ZAP SECURITY TEST

- task: DockerInstaller@0
  inputs:
    dockerVersion: '17.09.0-ce'
- task: Bash@3
  displayName: Initialized Owasp Zap
  inputs:
    targetType: 'inline'
    script: |
      chmod -R 777  ./
      docker run -v $(pwd):/zap/wrk/:rw -t owasp/zap2docker-stable zap-api-scan.py -t http://jv-dds-ccs-sit.anteraja.id/rest/speedQuery/waybill/byNo/web -f openapi -g api-scan.conf -x OWASP-ZAP-Report.xml -r api-scan-report.html -J api-report.json 
      
      true
      
- task: PowerShell@2
  displayName: Result XLST to NUNIT
  inputs:
    targetType: 'inline'
    script: |
      $XslPath = "$(System.DefaultWorkingDirectory)/OWASPToNUnit3.xslt"
      $XmlInputPath = "$(System.DefaultWorkingDirectory)/OWASP-ZAP-Report.xml"
      $XmlOutputPath = "$(System.DefaultWorkingDirectory)/Converted-OWASP-ZAP-Report.xml"
      $XslTransform = New-Object System.Xml.Xsl.XslCompiledTransform
      $XslTransform.Load($XslPath)
      $XslTransform.Transform($XmlInputPath, $XmlOutputPath)

- task: PublishTestResults@2
  displayName: Publish Result Nunit to Azure DevOps
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '$(System.DefaultWorkingDirectory)/Converted-OWASP-ZAP-Report.xml'
    
- task: LakshayKaushik.PublishHTMLReports.publishhtmlreport.publishhtmlreport@1.2.1
  inputs:
    htmlType: 'genericHTML'
    htmlPath: '$(System.DefaultWorkingDirectory)/api-scan-report.html'
      
- task: Bash@3
  displayName: Install Plugin
  inputs:
    targetType: 'inline'
    script: |
      sudo apt-get install xmlstarlet
      sudo apt-get install jq
      sudo apt-get update
      sudo apt-get install libxml2-utils

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(System.DefaultWorkingDirectory)'
    artifact: 'OwaspZap'
    publishLocation: 'pipeline'

- task: Bash@3
  displayName: Summary Report 
  inputs:
    targetType: 'inline'
    script: |
      echo "Severity Board : "
      echo "3 = High"
      echo "2 = Medium"
      echo "1 = Low"
      echo "0 = Informational"
      echo "======= Summary Report ========"
      echo "Alert           |       Severity Level"
      echo "$(jq -r '.site | .[] | .alerts | .[] | "\(.name) = \(.riskcode)"' $(System.DefaultWorkingDirectory)/api-report.json)"
      echo "==============================="
      echo "##vso[task.setvariable variable=actualResult;]$(xmlstarlet sel -t -v '//test-run/@failed' -nl $(System.DefaultWorkingDirectory)/Converted-OWASP-ZAP-Report.xml)"
      echo "##vso[task.setvariable variable=actualHigh;]$(xmllint --html --xpath "//td[2]/div[1]/text()" $(System.DefaultWorkingDirectory)/api-scan-report.html | head -n 1)"
      

- task: Bash@3
  displayName: PASSED / FAILED 
  inputs:
    filePath: 'zap/check-result.sh'
    arguments: '$(actualResult) $(expectedResult) $(actualHigh)'
    workingDirectory: zap

